From 27ff02b82931b85b807be74a1850a0ccc8eea101 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?L=C3=A1szl=C3=B3=20Vask=C3=B3?=
 <1771332+vlaci@users.noreply.github.com>
Date: Mon, 5 Jun 2023 22:02:14 +0200
Subject: [PATCH] Revert "x11/wayland: improve non-latin ctrl/alt keypresses"

This reverts commit 21e19ca09123dafd2d2ba5e21ef58ee7cbf1b123.
---
 window/src/os/x11/keyboard.rs | 85 ++++++-----------------------------
 1 file changed, 14 insertions(+), 71 deletions(-)

diff --git a/window/src/os/x11/keyboard.rs b/window/src/os/x11/keyboard.rs
index 7f772dc0b..163181a86 100644
--- a/window/src/os/x11/keyboard.rs
+++ b/window/src/os/x11/keyboard.rs
@@ -16,11 +16,9 @@ use xkbcommon::xkb;
 pub struct Keyboard {
     context: xkb::Context,
     keymap: RefCell<xkb::Keymap>,
-    _default_keymap: RefCell<xkb::Keymap>,
     device_id: i32,
 
     state: RefCell<xkb::State>,
-    default_state: RefCell<xkb::State>,
     compose_state: RefCell<Compose>,
     phys_code_map: RefCell<HashMap<xkb::Keycode, PhysKeyCode>>,
     mods_leds: RefCell<(Modifiers, KeyboardLedStatus)>,
@@ -111,7 +109,17 @@ impl Compose {
             }
             ComposeStatus::Nothing => {
                 let utf8 = key_state.borrow().key_get_utf8(xcode);
-                FeedResult::Nothing(utf8, xsym)
+                // CTRL-<ALPHA> is helpfully encoded in the form that we would
+                // send to the terminal, however, we do want the chance to
+                // distinguish between eg: CTRL-i and Tab, so if we ended up
+                // with a control code representation from the xkeyboard layer,
+                // discard it.
+                // <https://github.com/wez/wezterm/issues/1851>
+                if utf8.len() == 1 && utf8.as_bytes()[0] < 0x20 {
+                    FeedResult::Nothing(String::new(), xsym)
+                } else {
+                    FeedResult::Nothing(utf8, xsym)
+                }
             }
             ComposeStatus::Cancelled => {
                 self.state.reset();
@@ -121,27 +129,6 @@ impl Compose {
     }
 }
 
-fn default_keymap(context: &xkb::Context) -> Option<xkb::Keymap> {
-    // use $XKB_DEFAULT_RULES or system default
-    let system_default_rules = "";
-    // use $XKB_DEFAULT_MODEL or system default
-    let system_default_model = "";
-    // use $XKB_DEFAULT_LAYOUT or system default
-    let system_default_layout = "";
-    // use $XKB_DEFAULT_VARIANT or system default
-    let system_default_variant = "";
-
-    xkb::Keymap::new_from_names(
-        context,
-        system_default_rules,
-        system_default_model,
-        system_default_layout,
-        system_default_variant,
-        None,
-        xkb::KEYMAP_COMPILE_NO_FLAGS,
-    )
-}
-
 impl Keyboard {
     pub fn new_from_string(s: String) -> anyhow::Result<Self> {
         let context = xkb::Context::new(xkb::CONTEXT_NO_FLAGS);
@@ -163,17 +150,11 @@ impl Keyboard {
 
         let phys_code_map = build_physkeycode_map(&keymap);
 
-        let default_keymap = default_keymap(&context)
-            .ok_or_else(|| anyhow!("Failed to load system default keymap"))?;
-        let default_state = xkb::State::new(&default_keymap);
-
         Ok(Self {
             context,
             device_id: -1,
             keymap: RefCell::new(keymap),
             state: RefCell::new(state),
-            _default_keymap: RefCell::new(default_keymap),
-            default_state: RefCell::new(default_state),
             compose_state: RefCell::new(Compose {
                 state: compose_state,
                 composition: String::new(),
@@ -234,18 +215,11 @@ impl Keyboard {
         }
 
         let phys_code_map = build_physkeycode_map(&keymap);
-
-        let default_keymap = default_keymap(&context)
-            .ok_or_else(|| anyhow!("Failed to load system default keymap"))?;
-        let default_state = xkb::State::new(&default_keymap);
-
         let kbd = Keyboard {
             context,
             device_id,
             keymap: RefCell::new(keymap),
             state: RefCell::new(state),
-            _default_keymap: RefCell::new(default_keymap),
-            default_state: RefCell::new(default_state),
             compose_state: RefCell::new(Compose {
                 state: compose_state,
                 composition: String::new(),
@@ -357,45 +331,14 @@ impl Keyboard {
                     sym
                 }
                 FeedResult::Nothing(utf8, sym) => {
-                    // Composition had no special expansion.
-                    // Xkb will return a textual representation of the key even when
-                    // it is not generally useful; for example, when CTRL, ALT or SUPER
-                    // are held, we don't want its mapping as it can be counterproductive:
-                    // CTRL-<ALPHA> is helpfully encoded in the form that we would
-                    // send to the terminal, however, we do want the chance to
-                    // distinguish between eg: CTRL-i and Tab.
-                    //
-                    // This logic excludes that textual expansion for this situation.
-                    //
-                    // <https://github.com/wez/wezterm/issues/1851>
-                    // <https://github.com/wez/wezterm/issues/2845>
-                    if !utf8.is_empty()
-                        && !raw_modifiers
-                            .intersects(Modifiers::CTRL | Modifiers::ALT | Modifiers::SUPER)
-                    {
+                    if !utf8.is_empty() {
                         kc.replace(crate::KeyCode::composed(&utf8));
                     }
-
-                    // If we don't have a textual expansion in this case, we will
-                    // consider the equivalent key from the system default / base
-                    // layout.
-                    // For example, if RU is active and they pressed CTRL-S that
-                    // will produce utf8=Ñ‹ here, which is not useful.
-                    // Looking up in the default keymap will resolve us to the S
-                    // key which is more desirable in the context of a terminal.
-                    // default_xsym is that base key
-                    let default_xsym = self.default_state.borrow().key_get_one_sym(xcode);
-
                     log::trace!(
                         "process_key_event: RawKeyEvent FeedResult::Nothing: \
-                                {utf8:?}, {sym:?}. kc -> {kc:?} def_sym={default_xsym:?}"
+                                {utf8:?}, {sym:?}. kc -> {kc:?}"
                     );
-                    if kc.is_none() {
-                        // Use the default key layout symbol instead
-                        default_xsym
-                    } else {
-                        sym
-                    }
+                    sym
                 }
                 FeedResult::Cancelled => {
                     log::trace!("process_key_event: RawKeyEvent FeedResult::Cancelled");
-- 
2.40.1

